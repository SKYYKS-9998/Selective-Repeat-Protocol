#include <stdio.h>
#include <string.h>

#include "protocol.h"
#include "datalink.h"

#define DATA_TIMER  5000
#define ACK_TIMER 280
#define MAX_SEQ 31
#define NR_BUFS ((MAX_SEQ + 1) / 2)

typedef enum { false, true } bool;

typedef struct {
	unsigned char info[PKT_LEN];
}Packet;

typedef struct{ 
    unsigned char kind; /* FRAME_DATA */
    unsigned char ack;
    unsigned char seq;
    Packet data; 
    unsigned int  padding;
}Frame;

static bool no_nak = true;
static int phl_ready = 0;

static bool between(unsigned int a, unsigned int b, unsigned int c);

static inline inc(unsigned int k);

static void put_frame(unsigned char *frame, int len);

static void send_data(unsigned char fk, unsigned char frame_nr, unsigned char frame_expected, Packet buffer[]);

	int main(int argc, char **argv)
{
	unsigned char ack_expected;
	unsigned char next_frame_to_send;
	unsigned char too_far;
	unsigned char frame_expected;
	static unsigned char nbuffered;
	int i;
    int event, arg;
    Frame f;
    Packet out_buf[NR_BUFS];
    Packet in_buf[NR_BUFS];
    bool arrived[NR_BUFS];
    int len = 0;

    enable_network_layer();
    ack_expected = 0;
    next_frame_to_send = 0;
    frame_expected = 0;
    too_far = NR_BUFS;
    nbuffered = 0;
    for (i = 0; i < NR_BUFS; i++)
	    arrived[i] = false;

    protocol_init(argc, argv); 
    lprintf("Designed by Zheng Yuheng, build: " __DATE__"  "__TIME__"\n");

    for (;;) {
        event = wait_for_event(&arg);

        switch (event) {
        case NETWORK_LAYER_READY:
            nbuffered++;
		    get_packet(out_buf[next_frame_to_send % NR_BUFS].info);
	        send_data(FRAME_DATA, next_frame_to_send, frame_expected, out_buf);
	        inc(next_frame_to_send);
            break;

        case PHYSICAL_LAYER_READY:
            phl_ready = 1;
            break;

        case FRAME_RECEIVED: 
            len = recv_frame((unsigned char *)&f, sizeof f);
            if (len < 5 || crc32((unsigned char *)&f, len) != 0) 
            {
                dbg_event("**** Receiver Error, Bad CRC Checksum\n");
		        if (no_nak)
			        send_data(FRAME_NAK, 0, frame_expected, out_buf);
                break;
            }
            if (f.kind == FRAME_ACK) 
                dbg_frame("Recv ACK  %d\n", f.ack);
            if (f.kind == FRAME_DATA) 
            {
		        if (f.seq != frame_expected && no_nak)
			        send_data(FRAME_NAK, 0, frame_expected, out_buf);
		        else
			        start_ack_timer(ACK_TIMER);

			    if (between(frame_expected, f.seq, too_far) && (arrived[f.seq % NR_BUFS] == false))
                {
				    dbg_frame("Recv DATA %d %d, ID %d\n", f.seq, f.ack, *(short *)&(f.data).info);
				    arrived[f.seq % NR_BUFS] = true;
                    memcpy(in_buf[f.seq % NR_BUFS].info, f.data.info, PKT_LEN);
				    while (arrived[frame_expected % NR_BUFS]) 
                    {
                        put_packet(in_buf[frame_expected % NR_BUFS].info, len - 7);
                        no_nak = true;
                        arrived[frame_expected % NR_BUFS] = false;
                        inc(frame_expected);
                        inc(too_far);
                        start_ack_timer(ACK_TIMER);
                    }
                }
            } 

            if (f.kind == FRAME_NAK && between(ack_expected, (f.ack + 1) % (MAX_SEQ + 1), next_frame_to_send))
                send_data(FRAME_DATA, (f.ack + 1) % (MAX_SEQ + 1), frame_expected, out_buf);

            while (between(ack_expected, f.ack, next_frame_to_send))
            {
                nbuffered--;
                stop_timer(ack_expected % NR_BUFS);
                inc(ack_expected);
            }
            break; 

        case DATA_TIMEOUT:
            dbg_event("---- DATA %d timeout\n", arg); 
            if (!between(ack_expected, arg, next_frame_to_send))
                arg += NR_BUFS;
            send_data(FRAME_DATA, arg, frame_expected, out_buf);
            break;

        case ACK_TIMEOUT:
            dbg_event("---- DATA %d timeout\n", arg);
            send_data(FRAME_ACK, 0, frame_expected, out_buf);
            break;
        }

        if (nbuffered < NR_BUFS && phl_ready)
            enable_network_layer();
        else
            disable_network_layer();
   }
}

static bool between(unsigned int a, unsigned int b, unsigned int c)
{
	return ((a <= b) && (b < c)) || ((c < a) && (b >= a)) || ((c < a) && (b < c));
}

static inline inc(unsigned int k)
{
	k = (k + 1) % (MAX_SEQ + 1);
}

static void put_frame(unsigned char *frame, int len)
{
	*(unsigned int *)(frame + len) = crc32(frame, len);
	send_frame(frame, len + 4);
	phl_ready = 0;
}

static void send_data(unsigned char fk, unsigned char frame_nr, unsigned char frame_expected, Packet buffer[])
{
	Frame s;

	s.kind = fk;
	s.seq = frame_nr;
	s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1);
	if (fk == FRAME_DATA) 
    {
		memcpy(s.data.info, buffer[frame_nr % NR_BUFS].info, PKT_LEN);
		dbg_frame("Send DATA %d %d, ID %d\n", s.seq, s.ack, *(short *)&(s.data).info);
		put_frame((unsigned char *)&s, 3 + PKT_LEN);
		start_timer(frame_nr % NR_BUFS, DATA_TIMER);
	}
	if (fk == FRAME_ACK) 
    {
		dbg_frame("Send ACK  %d\n", s.ack);
		put_frame((unsigned char *)&s, 2);
	}
	if (fk == FRAME_NAK) 
    {
		no_nak = false;
		put_frame((unsigned char *)&s, 2);
	}

	stop_ack_timer();
}